{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\Documents\\\\repos\\\\nhl-team-info\\\\nhl-team-info-frontend\\\\src\\\\components\\\\teams\\\\teams.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './teams.css';\nimport { useNavigate } from 'react-router-dom';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { useRouter } from 'next/router';\nimport { urlConfig } from '../../config';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Teams() {\n  _s();\n  const [teams, setTeams] = useState([]);\n  const [isLoading, setIsLoading] = useState(true); // Add a loading state\n  //const navigate = useNavigate();\n\n  useEffect(() => {\n    // fetch all teams\n    const fetchTeams = async () => {\n      try {\n        //let url = '${urlConfig.backendUrl}/api/teams';\n        let url = 'http://localhost:3060/api/teams';\n        const response = await fetch(url);\n        if (!response.ok) {\n          //something went wrong\n          throw new Error(`HTTP error; ${response.status}`);\n        }\n        const data = await response.json();\n        setTeams(data.data);\n        setIsLoading(false); // Set loading to false after data is fetched\n      } catch (error) {\n        console.log('Fetch error: ' + error.message);\n      }\n    };\n    fetchTeams();\n  }, []);\n\n  /* const goToDetailsPage = (teamId) => {\r\n    navigate(`/app/teams/${teamId}`); // TODO: make this route mean something\r\n  }; */\n\n  // Conditionally render based on loading state\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 14\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Teams\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: teams.map(team => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [team.fullName, \" \", /*#__PURE__*/_jsxDEV(\"em\", {\n            children: [\"(\", team.rawTricode, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 53\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => goToDetailsPage(team.teamId),\n            children: \"View Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this)]\n        }, team.teamId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  }\n}\n_s(Teams, \"c6iNqXQ4kfCDKzW+LLozSdKVyz4=\");\n_c = Teams;\nexport default Teams;\nvar _c;\n$RefreshReg$(_c, \"Teams\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","BrowserRouter","Router","Routes","Route","useRouter","urlConfig","jsxDEV","_jsxDEV","Fragment","_Fragment","Teams","_s","teams","setTeams","isLoading","setIsLoading","fetchTeams","url","response","fetch","ok","Error","status","data","json","error","console","log","message","children","fileName","_jsxFileName","lineNumber","columnNumber","map","team","fullName","rawTricode","onClick","goToDetailsPage","teamId","_c","$RefreshReg$"],"sources":["C:/Users/andre/Documents/repos/nhl-team-info/nhl-team-info-frontend/src/components/teams/teams.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './teams.css';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport { useRouter } from 'next/router';\r\nimport {urlConfig} from '../../config';\r\n\r\nfunction Teams() {\r\n    const [teams, setTeams] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true); // Add a loading state\r\n    //const navigate = useNavigate();\r\n    \r\n\r\n    useEffect(() => {\r\n      // fetch all teams\r\n      const fetchTeams = async () => {\r\n          try {\r\n              //let url = '${urlConfig.backendUrl}/api/teams';\r\n              let url = 'http://localhost:3060/api/teams';\r\n              const response = await fetch(url);\r\n              if (!response.ok) {\r\n                  //something went wrong\r\n                  throw new Error(`HTTP error; ${response.status}`)\r\n              }\r\n              const data = await response.json();\r\n              setTeams(data.data);\r\n              setIsLoading(false); // Set loading to false after data is fetched\r\n          } catch (error) {\r\n              console.log('Fetch error: ' + error.message);\r\n          }\r\n      };\r\n\r\n      fetchTeams();\r\n  }, []);\r\n\r\n  /* const goToDetailsPage = (teamId) => {\r\n    navigate(`/app/teams/${teamId}`); // TODO: make this route mean something\r\n  }; */\r\n  \r\n\r\n    // Conditionally render based on loading state\r\n    if (isLoading) {\r\n      return <div>Loading...</div>;\r\n  } else {\r\n      return (\r\n        <>\r\n          <h1>Teams</h1>\r\n          <ul>\r\n          {teams.map(team => (\r\n              <li key={team.teamId}>{team.fullName} <em>({team.rawTricode})</em>\r\n                <button onClick={() => goToDetailsPage(team.teamId)}>View Details</button>\r\n            </li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Teams;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,aAAa;AACpB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AACzE,SAASC,SAAS,QAAQ,aAAa;AACvC,SAAQC,SAAS,QAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvC,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClD;;EAGAD,SAAS,CAAC,MAAM;IACd;IACA,MAAMmB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACA;QACA,IAAIC,GAAG,GAAG,iCAAiC;QAC3C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;QACjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;UACd;UACA,MAAM,IAAIC,KAAK,CAAC,eAAeH,QAAQ,CAACI,MAAM,EAAE,CAAC;QACrD;QACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClCX,QAAQ,CAACU,IAAI,CAACA,IAAI,CAAC;QACnBR,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;MACzB,CAAC,CAAC,OAAOU,KAAK,EAAE;QACZC,OAAO,CAACC,GAAG,CAAC,eAAe,GAAGF,KAAK,CAACG,OAAO,CAAC;MAChD;IACJ,CAAC;IAEDZ,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;;EAGI;EACA,IAAIF,SAAS,EAAE;IACb,oBAAOP,OAAA;MAAAsB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChC,CAAC,MAAM;IACH,oBACE1B,OAAA,CAAAE,SAAA;MAAAoB,QAAA,gBACEtB,OAAA;QAAAsB,QAAA,EAAI;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACd1B,OAAA;QAAAsB,QAAA,EACCjB,KAAK,CAACsB,GAAG,CAACC,IAAI,iBACX5B,OAAA;UAAAsB,QAAA,GAAuBM,IAAI,CAACC,QAAQ,EAAC,GAAC,eAAA7B,OAAA;YAAAsB,QAAA,GAAI,GAAC,EAACM,IAAI,CAACE,UAAU,EAAC,GAAC;UAAA;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAChE1B,OAAA;YAAQ+B,OAAO,EAAEA,CAAA,KAAMC,eAAe,CAACJ,IAAI,CAACK,MAAM,CAAE;YAAAX,QAAA,EAAC;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GADnEE,IAAI,CAACK,MAAM;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAElB,CACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA,eACL,CAAC;EAET;AACF;AAACtB,EAAA,CAlDQD,KAAK;AAAA+B,EAAA,GAAL/B,KAAK;AAoDd,eAAeA,KAAK;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}